#include <WiFi.h>
#include <WebServer.h>
#include <HardwareSerial.h>
#include <Arduino.h>

#define simSerial Serial2
#define MCU_SIM_BAUDRATE 115200
#define MCU_SIM_TX_PIN 17
#define MCU_SIM_RX_PIN 16
#define MCU_SIM_EN_PIN 15

// ƒê·ªãnh nghƒ©a ch√¢n c·∫£m bi·∫øn
#define FLAME_PIN_1 5
#define FLAME_PIN_2 18
#define MQ2_PIN 32
#define MQ135_PIN 33

// Ng∆∞·ª°ng cho t·ª´ng ch·∫•t kh√≠ (c√≥ th·ªÉ ƒëi·ªÅu ch·ªânh t√πy theo d·ªØ li·ªáu th·ª±c t·∫ø)
#define NH3_THRESHOLD 30      // Amoniac (NH‚ÇÉ)
#define NOX_THRESHOLD 60      // Nit∆° oxit (NOx)
#define ALCOHOL_THRESHOLD 20  // C·ªìn (Alcohol)
#define BENZENE_THRESHOLD 40  // Benzen (Benzene)
#define SMOKE_THRESHOLD 50    // Kh√≥i
#define CO2_THRESHOLD 150     // Carbon dioxide (CO‚ÇÇ)

// Ng∆∞·ª°ng c·∫£nh b√°o
#define MQ2_THRESHOLD 1500
#define FLAME_THRESHOLD LOW
#define PHONE_NUMBER "0707690321"

const char* ssid = "SPIDER - ROBOT";
const char* password = "12345678";
WebServer server(80);

void sim_at_wait() {
  delay(100);
  while (simSerial.available()) {
    Serial.write(simSerial.read());
  }
}

bool sim_at_cmd(String cmd) {
  simSerial.println(cmd);
  sim_at_wait();
  return true;
}

void sent_sms(String message) {
  sim_at_cmd("AT+CMGF=1");  // Ch·∫ø ƒë·ªô vƒÉn b·∫£n
  sim_at_cmd(String("AT+CMGS=\"") + PHONE_NUMBER + "\"");
  sim_at_cmd(message);  // N·ªôi dung tin nh·∫Øn
  // K·∫øt th√∫c tin nh·∫Øn
  simSerial.write(0x1A);
}

void call() {
  String temp = "ATD";
  temp += PHONE_NUMBER;
  temp += ";";
  sim_at_cmd(temp);  // G·ªçi ƒëi

  delay(20000);  // ƒê·ª£i 20 gi√¢y

  sim_at_cmd("ATH");  // C√∫p m√°y
}

// Khai b√°o h√†m ngo√†i handleRoot()
String getWarning(float value, float threshold, String name) {
  if (value > threshold) {
    return "‚ö†Ô∏è Nguy hi·ªÉm! " + name + " v∆∞·ª£t ng∆∞·ª°ng";
  } else {
    return "‚úÖ B√¨nh th∆∞·ªùng: " + name + " ·ªü m·ª©c an to√†n";
  }
}

void handleRoot() {
  int flame1 = digitalRead(FLAME_PIN_1);
  int flame2 = digitalRead(FLAME_PIN_2);
  int MQ2_value = analogRead(MQ2_PIN);
  int MQ135_value = analogRead(MQ135_PIN);

  float nh3 = map(MQ135_value, 0, 4095, 0, 100);
  float nox = map(MQ135_value, 0, 4095, 0, 150);
  float alcohol = map(MQ135_value, 0, 4095, 0, 50);
  float benzene = map(MQ135_value, 0, 4095, 0, 75);
  float smoke = (MQ135_value > 100) ? 100 : 0;
  float co2 = map(MQ135_value, 0, 4095, 0, 200);

  String html = "<html><head><meta http-equiv='refresh' content='2'><meta charset='UTF-8'><style>"
                "body { font-family: Arial, sans-serif; text-align: center; background-color: #f4f4f4; }"
                ".container { display: grid; grid-template-columns: repeat(3, 1fr); gap: 10px; max-width: 800px; margin: auto; }"
                ".grid-item { padding: 15px; font-size: 18px; border-radius: 10px; color: white; text-align: center; }"
                ".alert-fire { background-color: red; }"
                ".normal-fire { background-color: green; }"
                ".alert-gas { background-color: orange; }"
                ".normal { background-color: blue; }"
                "</style></head><body><h2>üîç Gi√°m s√°t m√¥i tr∆∞·ªùng b·∫±ng ESP32</h2>";

  html += "<div class='container'>";

  // C·∫£m bi·∫øn l·ª≠a 1
  html.concat("<div class='grid-item ");
  html.concat(flame1 == FLAME_THRESHOLD ? "alert-fire" : "normal-fire");
  html.concat("'>");
  html.concat("üî• C·∫£m bi·∫øn l·ª≠a 1<br><span>" + String(flame1) + "</span><br>");
  html.concat(flame1 == FLAME_THRESHOLD ? "üö® C·∫£nh b√°o! C√≥ l·ª≠a!" : "‚úÖ Kh√¥ng c√≥ l·ª≠a");
  html.concat("</div>");

  // C·∫£m bi·∫øn l·ª≠a 2
  html.concat("<div class='grid-item ");
  html.concat(flame2 == FLAME_THRESHOLD ? "alert-fire" : "normal-fire");
  html.concat("'>");
  html.concat("üî• C·∫£m bi·∫øn l·ª≠a 2<br><span>" + String(flame2) + "</span><br>");
  html.concat(flame2 == FLAME_THRESHOLD ? "üö® C·∫£nh b√°o! C√≥ l·ª≠a!" : "‚úÖ Kh√¥ng c√≥ l·ª≠a");
  html.concat("</div>");

  // MQ2 - Ph√°t hi·ªán kh√≠ gas
  html.concat("<div class='grid-item ");
  html.concat(MQ2_value > MQ2_THRESHOLD ? "alert-gas" : "normal");
  html.concat("'>");
  html.concat("üí® C·∫£m bi·∫øn MQ2 (Kh√≠ Gas)<br><span>" + String(MQ2_value) + "</span><br>");
  html.concat(getWarning(MQ2_value, MQ2_THRESHOLD, "Kh√≠ gas"));
  html.concat("</div>");

  // NH3
  html.concat("<div class='grid-item ");
  html.concat(nh3 > 50 ? "alert-gas" : "normal");
  html.concat("'>");
  html.concat("üí® Amoniac (NH‚ÇÉ)<br><span>" + String(nh3) + " ppm</span><br>");
  html.concat(getWarning(nh3, 50, "Amoniac"));
  html.concat("</div>");

  // NOx
  html.concat("<div class='grid-item ");
  html.concat(nox > 70 ? "alert-gas" : "normal");
  html.concat("'>");
  html.concat("üå´Ô∏è Nit∆° oxit (NOx)<br><span>" + String(nox) + " ppm</span><br>");
  html.concat(getWarning(nox, 70, "Nit∆° oxit"));
  html.concat("</div>");

  // Alcohol
  html.concat("<div class='grid-item ");
  html.concat(alcohol > 30 ? "alert-gas" : "normal");
  html.concat("'>");
  html.concat("üç∫ C·ªìn (Alcohol)<br><span>" + String(alcohol) + " ppm</span><br>");
  html.concat(getWarning(alcohol, 30, "C·ªìn"));
  html.concat("</div>");

  // Benzene
  html.concat("<div class='grid-item ");
  html.concat(benzene > 50 ? "alert-gas" : "normal");
  html.concat("'>");
  html.concat("üõ¢Ô∏è Benzen (Benzene)<br><span>" + String(benzene) + " ppm</span><br>");
  html.concat(getWarning(benzene, 50, "Benzen"));
  html.concat("</div>");

  // Smoke
  html.concat("<div class='grid-item ");
  html.concat(smoke > 0 ? "alert-gas" : "normal");
  html.concat("'>");
  html.concat("üí® Kh√≥i<br><span>");
  html.concat(smoke > 0 ? "‚ö†Ô∏è C√≥ kh√≥i!" : "‚úÖ Kh√¥ng c√≥ kh√≥i");
  html.concat("</span>");
  html.concat("</div>");

  // CO2
  html.concat("<div class='grid-item ");
  html.concat(co2 > 100 ? "alert-gas" : "normal");
  html.concat("'>");
  html.concat("üåø Carbon dioxide (CO‚ÇÇ)<br><span>" + String(co2) + " ppm</span><br>");
  html.concat(getWarning(co2, 100, "CO‚ÇÇ"));
  html.concat("</div>");

  html.concat("</div></body></html>");

  server.send(200, "text/html", html);
}

void setup() {
  /*  B·∫≠t ngu·ªìn m√¥-ƒëun SIM  */
  pinMode(MCU_SIM_EN_PIN, OUTPUT);
  digitalWrite(MCU_SIM_EN_PIN, LOW);
  delay(20);
  Serial.begin(115200);
  Serial.println("\n\n\n\n-----------------------\nH·ªá th·ªëng b·∫Øt ƒë·∫ßu!!!!");

  // ƒê·ª£i 8 gi√¢y ƒë·ªÉ m√¥-ƒëun SIM kh·ªüi ƒë·ªông
  delay(8000);
  simSerial.begin(MCU_SIM_BAUDRATE, SERIAL_8N1, MCU_SIM_RX_PIN, MCU_SIM_TX_PIN);

  // Ki·ªÉm tra l·ªánh AT
  sim_at_cmd("AT");
  sim_at_cmd("ATI");
  sim_at_cmd("AT+CPIN?");
  sim_at_cmd("AT+CSQ");
  sim_at_cmd("AT+CIMI");

  pinMode(FLAME_PIN_1, INPUT);
  pinMode(FLAME_PIN_2, INPUT);
  pinMode(MQ2_PIN, INPUT);
  pinMode(MQ135_PIN, INPUT);
  delay(5000);

  // Th·ª±c hi·ªán ph√°t WIFI
  WiFi.mode(WIFI_AP);
  WiFi.softAP(ssid, password);
  server.on("/", handleRoot);
  server.begin();
  Serial.print("AP IP address: ");
  Serial.println(WiFi.softAPIP());
}

void loop() {
  server.handleClient();
  int flame_detected_1 = digitalRead(FLAME_PIN_1);
  int flame_detected_2 = digitalRead(FLAME_PIN_2);
  Serial.print("Tr·∫°ng th√°i c·∫£m bi·∫øn l·ª≠a: ");
  Serial.println(flame_detected_1);
  delay(1000);
  if (flame_detected_1 == FLAME_THRESHOLD || flame_detected_2 == FLAME_THRESHOLD) {
    Serial.println("C·∫¢NH B√ÅO! PH√ÅT HI·ªÜN L·ª¨A!!!");
    Serial.println("---------------------------");
    sent_sms("CANH BAO! PHAT HIEN LUA!!!");
    delay(5000);
    call();  // Th·ª±c hi·ªán cu·ªôc g·ªçi
  }

  // Ki·ªÉm tra ph√°t hi·ªán kh√≠ gas t·ª´ c·∫£m bi·∫øn MQ2
  int MQ2_value = analogRead(MQ2_PIN);
  Serial.print("Gi√° tr·ªã MQ2: ");
  Serial.println(MQ2_value);
  delay(1000);
  if (MQ2_value > MQ2_THRESHOLD) {
    Serial.println("C·∫¢NH B√ÅO! R√í R·ªà KH√ç GAS!!!");
    Serial.println("---------------------------");
    sent_sms("CANH BAO! RO RI KHI GAS!!!");
    delay(5000);
    call();
  }

  // ƒê·ªçc v√† hi·ªÉn th·ªã th√¥ng s·ªë c·∫£m bi·∫øn MP135
  int MQ135_value = analogRead(MQ135_PIN);
  float nh3 = map(MQ135_value, 0, 1023, 0, 100);
  float nox = map(MQ135_value, 0, 1023, 0, 150);
  float alcohol = map(MQ135_value, 0, 1023, 0, 50);
  float benzene = map(MQ135_value, 0, 1023, 0, 75);
  float smoke = (MQ135_value > 600) ? 100 : 0;
  float co2 = map(MQ135_value, 0, 1023, 0, 200);

  Serial.print("MQ135 (Air Quality) Value: ");
  Serial.println(MQ135_value);
  Serial.print("NH‚ÇÉ (Amoniac): ");
  Serial.println(nh3);
  Serial.print("NOx (Nitrogen Oxides): ");
  Serial.println(nox);
  Serial.print("Ancol (Alcohols): ");
  Serial.println(alcohol);
  Serial.print("Benzen (Benzene): ");
  Serial.println(benzene);
  Serial.print("Kh√≥i: ");
  if (smoke > 600) {
    Serial.println("C·∫£nh b√°o kh√≥i");
  } else {
    Serial.println("Kh√¥ng c√≥ kh√≥i");
  }
  Serial.print("CO‚ÇÇ (Carbon Dioxide): ");
  Serial.println(co2);
  Serial.println("---------------------------");
  delay(2000);
}
